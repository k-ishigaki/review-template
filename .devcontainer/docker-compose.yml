version: "3.4"

volumes:
    tmp:
    vscode-server:

x-common-options: &common-options
    user: ${UID}:${GID}
    depends_on:
        - scripts
    environment:
        MOUNT_WAIT_COMMAND: until [ -d /root/.vscode-server ]; do :; done
        LAUNCH_COMMAND: >-
            sudo find /tmp/shared_bin/ -type f | xargs -I {} basename {} | xargs -I {} sh -cex '
            if ! command -v {}; then sudo cp -f /tmp/shared_bin/{} /usr/local/bin/{} && sudo chmod +s /usr/local/bin/{}; fi
            ' &&
            sleep infinity
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ${WORKSPACE_ROOT}:/workspaces
        - tmp:/tmp
        - vscode-server:/root/.vscode-server/bin
    working_dir: /workspaces/${PROJECT_FOLDER}
    command: sh -cex 'eval $${MOUNT_WAIT_COMMAND} && eval $${LAUNCH_COMMAND}'

services:
    docker:
        build: ./docker-docker
        image: splascope/docker-docker
        volumes:
            - tmp:/tmp
        command: sh -cex 'mkdir -p /tmp/shared_bin && cp -f `which docker` /tmp/shared_bin/docker && sleep infinity'

    scripts:
        image: bash
        <<: *common-options
        depends_on:
            - docker
        user: root # needed for generate_docker_cmd.sh
        command: >-
            sh -cex '
            eval $${MOUNT_WAIT_COMMAND} &&
            cp -f /tmp/shared_bin/docker /usr/local/bin/ &&
            bash .devcontainer/generate_docker_cmd.sh /tmp/shared_bin
            nvim@neovim
            tmux@tmux
            git@git
            git-shell@git
            fish@tmux
            rake@review
            review-update@review
            npm@node
            npx@node
            '

    node:
        build: ./node-docker
        image: splascope/node-docker
        <<: *common-options
        # Install textlint packages.
        # Packages are configured in ./package.json.
        command: >-
            sh -cex 'eval $${MOUNT_WAIT_COMMAND} && npm install && eval $${LAUNCH_COMMAND}'

    review:
        build: ./review-docker
        image: splascope/review-docker
        <<: *common-options
        command:
            - sh
            - -ecx
            - |
              sudo chown -R `id -u`:`id -g` /root
              eval $${MOUNT_WAIT_COMMAND}
              # prepare variables
              container_volume_name=`sudo /tmp/shared_bin/docker inspect --format='{{ index .Config.Labels "vsch.local.repository.volume"}}' $$HOSTNAME`
              project_folder_name=`sudo /tmp/shared_bin/docker inspect --format='{{ index .Config.Labels "com.docker.compose.project.working_dir"}}' $$HOSTNAME | sed -r 's/^.+\/(.+)\/.+$$/\1/'`
              cd ../$$project_folder_name
              # modify .env
              cp -fp .env .env.org
              # modify WORKSPACE_ROOT
              if [ -n "$$container_volume_name" ]; then
              sed -i -r 's/^(WORKSPACE_ROOT=).+$$/\1\/var\/lib\/docker\/volumes\/'"$$container_volume_name"'\/_data/' .env
              fi
              # modify PROJECT_FOLDER
              sed -i -r 's/^(PROJECT_FOLDER=).+$$/\1'"$$project_folder_name"'/' .env
              # modify COMPOSE_PROJECT_NAME
              sed -i -r 's/^(COMPOSE_PROJECT_NAME=).+$$/\1'"$${container_volume_name:-"local"}_$${project_folder_name}"'/' .env
              # modify UID / GID
              uid=`ls -nld . | awk '{print $$3}'`
              uid=`ls -nld . | awk '{print $$4}'`
              sed -i -r 's/^(UID=).+$$/\1'"$$uid"'/' .env
              sed -i -r 's/^(GID=).+$$/\1'"$$uid"'/' .env
              diff -u .env .env.org
              rm .env.org
              cd -
              eval $${LAUNCH_COMMAND}

    tmux:
        build: ./tmux-docker
        image: splascope/tmux-docker
        <<: *common-options

    git:
        build: ./git-docker
        image: splascope/git-docker
        <<: *common-options

    neovim:
        build:
            context: ./neovim-docker
            args:
                EXTRA_COC_PLUGINS: coc-docker
        image: splascope/neovim-docker
        <<: *common-options
