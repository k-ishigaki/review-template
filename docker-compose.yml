version: "3.4"

volumes:
    tmp:
    vscode-server:

x-common-options: &common-options
    user: ${USER_ID}:${GROUP_ID}
    environment:
        PREPARE_COMMAND: |
            # fix permissions
            sudo chown `id -u`:`id -g` /root/.vscode-server/bin
            sudo chown `id -u`:`id -g` /var/run/docker.sock

            # wait for docker binary
            if ! command -v docker 2&> /dev/null; then
                until /tmp/shared_bin/docker version > /dev/null; do sleep 1; done
            fi

            # prepare commands
            container_commands='
                docker@docker
                nvim@neovim
                tmux@tmux
                gh@git
                git@git
                git-shell@git
                fish@tmux
                rake@review
                review-update@review
                npm@node
                npx@node
                hadolint@hadolint
            '
            echo "$$container_commands" | while read -r container_command; do
                command=`echo "$$container_command" | cut -d '@' -f 1`
                command_name=`echo "$$command" | cut -d ' ' -f 1`
                service_name=`echo "$$container_command" | cut -d '@' -f 2`

                if command -v $$command_name; then continue; fi

                { \
                    echo '#!/bin/sh -e'; \
                    echo 'if [ -t 1 ]; then tty_option=-t; fi'; \
                    echo 'exec /tmp/shared_bin/docker exec -i $$tty_option -w $$PWD '"${COMPOSE_PROJECT_NAME}-$${service_name}-1 $${command}"' "$$@"'; \
                } | sudo tee /usr/local/bin/$$command_name
                sudo chmod +x /usr/local/bin/$$command_name
            done
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ./:/workspaces/${COMPOSE_PROJECT_NAME}
        - tmp:/tmp
    working_dir: /workspaces/${COMPOSE_PROJECT_NAME}
    command: sh -cex 'eval "$${PREPARE_COMMAND}" && sleep infinity'

x-common-args: &common-args
    USER_ID: "${USER_ID}"
    GROUP_ID: "${GROUP_ID}"

services:
    docker:
        build:
            context: .
            args:
                BASE_IMAGE: "ghcr.io/k-ishigaki/docker-docker:2.0"
                <<: *common-args
        <<: *common-options
        command: >
            sh -cex 'eval "$${PREPARE_COMMAND}" &&
            mkdir -p /tmp/shared_bin &&
            cp -f /usr/bin/docker /tmp/shared_bin/docker &&
            sleep infinity'

    node:
        build:
            context: .
            args:
                BASE_IMAGE: "ghcr.io/k-ishigaki/node-docker:2.0"
                <<: *common-args
        <<: *common-options
        # Install textlint packages.
        # Packages are configured in ./package.json.
        command: sh -cex 'eval "$${PREPARE_COMMAND}" && npm install && sleep infinity'

    review:
        build:
            context: .
            args:
                BASE_IMAGE: "ghcr.io/k-ishigaki/review-docker:2.0"
                <<: *common-args
        <<: *common-options

    tmux:
        build:
            context: .
            args:
                BASE_IMAGE: "ghcr.io/k-ishigaki/tmux-docker:2.0"
                <<: *common-args
        <<: *common-options

    git:
        build:
            context: .
            args:
                BASE_IMAGE: "ghcr.io/k-ishigaki/git-docker:2.0"
                <<: *common-args
        <<: *common-options

    neovim:
        build:
            context: .
            args:
                BASE_IMAGE: "ghcr.io/k-ishigaki/neovim-docker:2.0"
                <<: *common-args
        <<: *common-options

    hadolint:
        build:
            context: .
            args:
                BASE_IMAGE: "ghcr.io/hadolint/hadolint:2.12.0-alpine"
                <<: *common-args
        <<: *common-options
